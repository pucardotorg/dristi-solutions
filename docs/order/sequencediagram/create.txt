@startuml
autonumber
skinparam responseMessageBelowArrow true

title "Create and Publish Order"

Actor Judge as J

participant OrderUI as OU

box DRISIT Services
participant OrderSvc as OS #gold
participant CaseSvc as CS #gold
participant TaskSvc as TS #gold
participant ApplicationSvc as AS #gold
end box

box DIGIT Services #lightgray
participant Workflow as W #lightgreen
queue Kafka as K #lightgreen
participant PersisterSvc as P #lightgreen
Database PostgreSQL as DB #gray
end box

note right of J: Judge has logged in and picked a case for which order needs to be passed
J->OU: Fill in the Order details

OU->OS++: Create Order
OS->CS++: Validate caseId
return true/false
OS->OU: Return 400 : if caseId invalid
note right of OS: continue if caseId is valid
OS->OS: enrich orderId

opt if ordertype = summons/warrant
    loop for each address and delivery channel
        OS->TS++: Create Task for Summon
        TS->TS: enrich taskId, orderId, caseId
        return 201 : new Task created
        OS->TS++: Update Task with Summons/Warrant details
        return updated Task
    end
else ordertype = bail
    OS->TS++: Create Task for Bail
    TS->TS: enrich taskId, orderId, caseId
    return 201 : new Task created
    OS->TS++: Update Task with BailS
    return updated Task
else
    loop for each Party
        loop for each order type
            loop for each document type
            OS->TS++: Create Task
            TS->TS: enrich taskId, orderId, caseId
            return 201 : new Task created
            OS->TS++: Update Task with document, person details
            return updated Task
            end
        end
    end
end

OS->W++: get Order status
return Order status 'Drafted'
OS-> K++: Push Order payload to topic
return
return 201 : new Order created

P-> K: Read payload
P-> DB: Create records in DB

note right of OU: Normal flow for e-sign and publishing of order
OU->OS++: publish order
opt ordertype = bail
  note right of OS: When a bail order is passed, need to check if there is any unapproved bail application
  OS->AS++:search application (type=bail, status=pending approval)
  return bailApplication
  opt valid bailApplication
     note right of OS: update the bail Application as "approved/rejected" as per Order for bail status
     AS->AS: update bailApplication
  else null bailApplication
     note right of OS: no action required, as there is no bail application
  end
end
OS->W++: update Order status
return Order status 'Published'
return 200 order updated
OS-> K++: Push Order payload to topic
return
P-> K: Read payload
P-> DB: Create records in DB
@endum
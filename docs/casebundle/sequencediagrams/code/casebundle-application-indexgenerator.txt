@startuml
autonumber
skinparam responseMessageBelowArrow true

title "Case Bundle - Application Index Generator"

box DRISIT Services
participant CaseBundleIndexBuilderSvc as CBIBS #gold
participant CaseBundleSvc as CBS #gold
participant CaseManagementService as CMS #gold
participant ApplicationSvc as AS #gold
participant CaseUtilSvc as CUS #gold
end box

box DIGIT Services #lightgray
Database ESIndexer as ES #gray
participant FilestoreSvc as FS #lightgreen
participant PDFSvc as PS #lightgreen
participant MasterDataSvc as MDS #lightgreen
queue Kafka as K #lightgreen
participant PersisterSvc as PS #lightgreen
Database PostgreSQL as DB #gray
end box


CBIBS->CBS ++: processApplication(applicationNumber, indexJson, state)

note right of CBS: Different sections below as per the application states being processed

== State - PENDING_APPROVAL ==
note across: when application is in pending approval state, it is a new application and it will be added as part of 'pendingapplication' section. No objection will be available as yet

note right of CBS: pendingapplication section of Case Bundle
CBS->MDS++: get record from case_bundle_master where "pendingapplication" = section.name
return sectionRow
alt sectionRow.isActive = false
  note right of CBS: section not to be processed. EXIT method
end

CBS->AS++: search application (applicationNumber, tenantID)
return application
CBS->CBS: Create Item Json
CBS->CBS: set item.sortParam = applicationNumber

note right of CBS: we need to first pick the signed application PDF and then the attachments
loop application.documents for documentType = "application_signed"
  CBS->CBS: return application.documents.filestore
  CBS->CBS: set Item.sourceId = application.documents.filestore
  CBS->FS++: get application.documents.filestore
  return applicationPDF as bundlePDF
  CBS->CBS: exit loop
end
CBS->CBS: Process attachments in following loop
loop application.documents for documentType = "application_supporting_docs"
  CBS->FS++: get document.filestore
  return attachmentPDF
  note right of CBS: attachments will come after the application PDF
  CBS->CBS: bundlePDF = merge (append) attachmentPDF into bundlePDF
end

alt sectionRow.docketPageRequired = true
  CBS->CUS++: create docket page content (application)

  CUS->CS++: get casedetails (application.caseId)
  CUS->CUS: prepare docket page content
  note right of CUS
     data to be used application.creationDate, application.applicationType
     caseDetails.litigants, caseDetails.representatives, caseDetails.caseTitle
     and courtName from HRML using caseDetails.courtID
  end note
  return docketJson
  CBS->PS++: create cover PDF (docketJson, pdfTemplate)
  return docketPDF
  note right of CBS: merge the bundlePDF created so far into docket page to get a single PDF to be used for the bundle. docketPDF will be the first page
  CBS->CBS: bundlePDF= merge (append) bundlePDF into docketPDF
  return bundlePDF
end

CBS->FS++: store bundlePDF
return bundlePDFId
CBS->CBS: set item.createPDF = false
CBS->CBS: set item.fileStoreId = bundlePDFId

CBS->CBS: append indexJson (section.name = pendingapplications) with Item
CBS->CBS: indexJson.contentLastModified = current EPOCH DateTime
CBS->ES: update index (caseID, indexJson)


== State - COMPLETED/REJECTED ==


== State - DELETED ==
note across: application has been deleted. remove the entries from case bundle
loop application.documents for documentType = "application_signed"
  CBS->CBS: return application.documents.filestore
  CBS->CBS: exit loop
end

CBS->CBS: search applicationItem in indexJson
note right of CBS
  where indexJson.section.name = 'pendingapplications' OR 'applications'
  AND item.type = "application"
  AND item.sourceId = application.documents.filestore
end note
note right of CBS: we are deleting application entry. Need to delete objection if any, for the application
CBS->CBS: get nextItem after applicationItem
alt nextItem.type = objection
  CBS->CBS: delete nextItem
end
CBS->CBS: delete applicationItem



CBS->CBS: indexJson.contentLastModified = current EPOCH DateTime
CBS->ES: update index (caseID, indexJson)


== Event Processing ==


@enduml
@startuml
autonumber
skinparam responseMessageBelowArrow true

title "Case Bundle - Case Index Generator"

box DRISIT Services
participant CaseBundleIndexBuilderSvc as CBIBS #gold
participant CaseManagementService as CMS #gold
participant CaseSvc as CS #gold
participant CaseBundleSvc as CBS #gold
participant CaseUtilSvc as CUS #gold
end box

box DIGIT Services #lightgray
Database ESIndexer as ES #gray
participant FilestoreSvc as FS #lightgreen
participant PDFSvc as PS #lightgreen
participant MasterDataSvc as MDS #lightgreen
queue Kafka as K #lightgreen
participant PersisterSvc as PS #lightgreen
Database PostgreSQL as DB #gray
end box


CBIBS->CBS ++: processCase(caseId, indexJson, state)
CBIBS->CS++: get case details (caseId)
return caseDetails
note right of CBS: Different sections below as per the case states being processed

== State - UNDER_SCRUTINY ==
note across: Case is under scrutiny, hence complaint has been signed and all documents to be filed are finalized. But we don't know what document might have changed, so we will regenerate all - complaint, affidavit, vakalat, witness schedule and attached documents

note right of CBS: complaint section of Case Bundle
CBS->MDS++: get record from case_bundle_master where "complaint" = section.name
return sectionRow
alt sectionRow.isActive = false
  note right of CBS: section not to be processed. exit method
else
  CBS->CBS: get complaintPDF from caseDetails as streamPDF
  alt sectionRow.coverPageRequired = true
    CBS->PS++: create cover PDF (item.sourceId, sectionRow.coverpagestatement)
    return coverPDF
    CBS->CBS: streamPDF = merge (append) streamPDF into coverPDF
    return streamPDF
  end

  CBS->FS++: store streamPDF
  return streamPDF fileStoreId
  CBS->CBS: update indexJson with fileStoreId,
  note right of CUS
     update section.name = complaint, in indexJson
     set items.item.createPDF = false
     set items.item.sourceId = complaintPDF.fileStoreId
     set items.item.fileStoreId = streamPDF fileStroreId
     set items.item.sortParam = null
  end note
end


note right of CBS: affidavit section  of Case Bundle
CBS->MDS++: get record from case_bundle_master where "affidavit" = section.name
return sectionRow
alt sectionRow.isActive = false
  note right of CBS: section not to be processed. exit method
else
  note right of CBS: There are 2 affidavits

  CBS->CBS: get complaintPDF from caseDetails as streamPDF
  alt sectionRow.coverPageRequired = true
    CBS->PS++: create cover PDF (item.sourceId, sectionRow.coverpagestatement)
    return coverPDF
    CBS->CBS: streamPDF = merge (append) streamPDF into coverPDF
    return streamPDF
  end

  CBS->FS++: store streamPDF
  return streamPDF fileStoreId
  CBS->CBS: update indexJson with fileStoreId,
  note right of CUS
     update section.name = complaint, in indexJson
     set items.item.createPDF = false
     set items.item.sourceId = complaintPDF.fileStoreId
     set items.item.fileStoreId = streamPDF fileStroreId
     set items.item.sortParam = null
  end note
end

note right of CBS: vakalat section  of Case Bundle
CBLS->CUS++: process vakalat(caseDetails)

note right of CBS: witness schedule section  of Case Bundle
CBLS->CUS++: process witnessschedule(caseDetails)

note right of CBS: documents section  of Case Bundle
CBLS->CUS++: process documents(caseDetails)





== PENDING_ADMISSION_HEARING ==
== CASE_ADMITTED ==
== PENDING_APPROVAL ==
== COMPLETED ==






== Event Processing ==


@enduml
@startuml
autonumber
skinparam responseMessageBelowArrow true

title "Case Bundle - Order Index Generator"

box DRISIT Services
participant CaseBundleIndexBuilderSvc as CBIBS #gold
participant CaseBundleSvc as CBS #gold
participant CaseManagementService as CMS #gold
participant CaseSvc as CS #gold
participant OrderSvc as OS #gold
participant CaseUtilSvc as CUS #gold
end box

box DIGIT Services #lightgray
Database ESIndexer as ES #gray
participant FilestoreSvc as FS #lightgreen
participant PDFSvc as PS #lightgreen
participant MasterDataSvc as MDS #lightgreen
end box

== State - PUBLISHED ==
note across: a new order is available when it gets to published state. this is the time to add it to the case bundle
CBIBS->CBS ++: processOrder(orderNumber, indexJson, state)
note right of CBS: orders section of Case Bundle
CBS->MDS++: get record from case_bundle_master where "orders" = section.name
return sectionRow
alt sectionRow.isActive = false
  note right of CBS: section not to be processed. EXIT method
end

CBS->OS++: search order (orderNumber, tenantID)
return order
CBS->CBS: Create Item Json
CBS->CBS: set item.content = order
CBS->CBS: set item.sortParam = order.createdDate

note right of CBS: we need to pick the signed order PDF
loop order.documents for documentType = "order.signed"
  CBS->CBS: return order.documents.filestore
  CBS->CBS: set Item.sourceId = order.documents.filestore
  CBS->FS++: get order.documents.filestore
  return orderPDF as bundlePDF
  CBS->CBS: exit loop
end

alt sectionRow.docketPageRequired = true
note right of CBS: in current implementation, orders don't need dockets, but in case it is required in future
  CBS->CUS++: create docket page content (order)

  CUS->CS++: get casedetails (order.caseId)
  CUS->CUS: prepare docket page content
  note right of CUS
     data to be used order.creationDate, order.applicationType
     caseDetails.litigants, caseDetails.representatives, caseDetails.caseTitle
     and courtName from HRMS using caseDetails.courtID
  end note
  return docketJson
  CBS->PS++: create cover PDF (docketJson, pdfTemplate)
  return docketPDF
  note right of CBS: merge the bundlePDF created so far into docket page to get a single PDF to be used for the bundle. docketPDF will be the first page
  CBS->CBS: bundlePDF= merge (append) bundlePDF into docketPDF
  return bundlePDF
end

CBS->FS++: store bundlePDF
return bundlePDFId
CBS->CBS: set item.createPDF = false
CBS->CBS: set item.fileStoreId = bundlePDFId

CBS->CBS: append indexJson (section.name = 'orders') with Item
CBS->CBS: indexJson.contentLastModified = current EPOCH DateTime
CBS->CMS: update index(indexJson)
CMS->ES: update index (caseID, indexJson)
return
== State - DELETED ==
note across: order has been deleted. remove the entries from case bundle
CBIBS->CBS ++: processOrder(orderNumber, indexJson, state)
CBS->MDS++: get record from case_bundle_master where "orders" = section.name
return sectionRow
alt sectionRow.isActive = false
  note right of CBS: section not to be processed. EXIT method
end
CBS->OS++: search order (orderNumber, tenantID)
return order
loop order.documents for documentType = "order.signed"
  CBS->CBS: return order.documents.filestore
  CBS->CBS: exit loop
end

CBS->CBS: search orderItem in indexJson
note right of CBS
  where indexJson.section.name = 'orders'
  AND orderItem.type = "order"
  AND orderItem.sourceId = order.documents.filestore
end note
CBS->FS++: delete orderItem.fileStoreId
return success
CBS->CBS: delete orderItem

CBS->CBS: indexJson.contentLastModified = current EPOCH DateTime
CBS->CMS: update index(indexJson)
CMS->ES: update index (caseID, indexJson)
return
@enduml
@startuml
autonumber
skinparam responseMessageBelowArrow true

title "Case Bundle - Create API"


participant Trigger as T

box DRISIT Services
participant CaseManagementService as CMS #gold
participant CaseSvc as CS #gold
participant CaseBundleSvc as CBS #gold
participant CaseUtilSvc as CUS #gold
end box

box DIGIT Services #lightgray
participant FilestoreSvc as FS #lightgreen
participant PDFSvc as PS #lightgreen
participant MasterDataSvc as MDS #lightgreen
Database ESIndexer as ES #gray
Database PostgreSQL as DB #gray
end box


T->CMS++: create case bundle (caseId)
note across: The Case Bundle Create API can be called via UI or case-bundle-create Kafka Topic
CMS->CMS: record CaseBundleTracker.startDate

CMS->ES++: query 'case-bundle-pdf' index for caseId
return indexJson

alt indexJson.isCaseRegistered = false
   note over CMS: Case not yet registered. Only ComplaintPDF will be avaiable at this time
   CMS->CBS++: invoke caseComplaintPDF (caseId)
      note over CMS: follow 'Case Bundle Complaint PDF Create' sequence diagram
   return success

else indexJson.contentLastModified <= indexJson.pdfCreatedDate
   note over CMS: no content update. So reuse the PDF bundle already created
   CMS->T: return indexJson.fileStoreId
end

CMS->CS++: get case details (caseId)
return case details

alt case.courtCaseNumber != null
note right of CMS: Case has an ST number. Has been admitted
  CMS->CMS: set caseNumber = case.courtCaseNumber
else case.cmpNumber != null
note right of CMS: Case has a CMP number. Has been registered
  CMS->CMS: set caseNumber = case.cmpNumber
else
note right of CMS: Case not yet registered
  CMS->CMS: set caseNumber = case.filingNumber
end

CMS->CBS++: Build CasePDF (caseNumber, indexJson)
Note over CBS: Before proceeding, need to validate if there are any duplicate sourceIds and fileStoreIds
CBS->CBS: ValidateAndRemoveDuplicates(indexJson)


loop for each section in index.sections

CBS->MDS++: get sectionRow from case_bundle_master where name = section.name
return sectionRow
alt sectionRow.isActive = false
  note right of CBS: section not to be processed. continue to next item in loop
end
  note right of CBS: the title page needs specific treatment
  alt section.name = "titlepage"
    CBS->PS++: create Cover Page PDF (caseNumber)
    return streamPDF
    CBS->CBS: set CasePDF = streamPDF
  else
    Note over CBS: need to ensure that all items in a section are in correct sort order
    CBS->CBS: ValidateAndFixSort(section)

    loop for each item in section.lineItems
      alt item.createPDF = true
        CBS->PS++: create PDF (item.sourceId)
        return streamPDF

        alt sectionRow.docketPageRequired = true
          CBS->PS++: create cover PDF (item.sourceId)
          return coverPDF
          CBS->CBS: streamPDF = merge (append) streamPDF into coverPDF
        end

        CBS->CBS: merge streamPDF into CasePDF and update header with caseNumber
        alt can save PDF?
           CBS->FS++: store streamPDF
           return fileStoreID
           CBS->CBS: update item.fileStoreId = fileStoreID
           CBS->CBS: update indexJson (case-bundle-pdf, caseId)
        end
      else
        CBS->FS++: get item.fileStoreId
        return filePDF
        CBS->CBS: merge (append) filePDF into CasePDF and update header with caseNumber and add page number
      end
    end
  end
end

CBS->FS++: store CasePDF
return CasePDFFileStoreId
CBS->CBS: oldbundlePDFId = indexJson.filestoreId
CBS->CBS: update indexJson(filestoreId = CasePDFFileStoreId, pdfCreatedDate = current datetime in EPOCH (milliseconds), isInProcessing = false)

CBS->FS: delete oldbundlePDFId
CBS->ES++: update index (indexJson, caseId)
return success
return indexJson

CMS->CMS: record CaseBundleTracker.pageCount = casePDF.pagecount
CMS->CMS: record CaseBundleTracker.endDate = current datetime in EPOCH (milliseconds)
CMS->DB++: insert CaseBundleTracker
return success


return index.fileStoreId
@enduml
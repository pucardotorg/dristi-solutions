name: user-otp Image Build workflow
on:
  push:
    branches:
      - develop
      - main
      - release**
    tags:
      - 'v*'
    paths:
      - 'common/user-otp/**'
  pull_request:
    branches:
      - develop
      - main
      - release**
    paths:
      - 'common/user-otp/**'
  workflow_dispatch:
  workflow_call:
permissions:
  security-events: write
  contents: read
jobs:
  docker_image-build:
    if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v'))) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Dependency check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: 'user-otp'
          path: 'common/user-otp'
          format: 'SARIF'
      - name: Upload SARIF result to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif
        if: always()
      - name: Build and analyze for user-otp
        env:
          GITHUB_TOKEN: ${{ secrets.GHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B -f common/user-otp/pom.xml package org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=solutions_user_otp -Dsonar.organization=solutions -Dsonar.host.url=https://sonarcloud.io/

      # Login to Azure Container Registry
      - name: Login to Azure Container Registry
        run: docker login -u pucarsolutionsdev -p ${{ secrets.ACR_PASSWORD }} pucarsolutionsdev.azurecr.io
      - name: Set Version from Tag or Branch
        id: set_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}  # Use tag name for version
          elif [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            # Use branch name as version, replacing '/' with '-'
            VERSION=${GITHUB_REF#refs/heads/}
            VERSION=$(echo "${VERSION}" | sed 's|/|-|g')
          else
            VERSION="latest"  # Default version if not a tag or branch
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Git commit_hash for service
        run: |
          commit_hash=$(git log -1 --pretty=format:%H -- common/user-otp)
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV
      - name: Build and Push Docker image for user-otp
        run: |
          docker build --build-arg WORK_DIR="common/user-otp" -t pucarsolutionsdev.azurecr.io/user-otp:${{ env.VERSION }}-${{ env.commit_hash }} -f build/maven/Dockerfile .
          docker push pucarsolutionsdev.azurecr.io/user-otp:${{ env.VERSION }}-${{ env.commit_hash }}


  Workflow_Trigger:
    if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v'))) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: docker_image-build
    steps:
      - name: Set Workflow File Based on Branch
        id: set_workflow
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "WORKFLOW_FILE=solutions-dev.yaml" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/release-0.4" ]; then
            echo "WORKFLOW_FILE=solutions-qa.yaml" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "WORKFLOW_FILE=solutions-uat.yaml" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/release-0.5" ]; then
            echo "WORKFLOW_FILE=solutions-dpg-dev.yaml" >> $GITHUB_ENV
          fi

      - name: Trigger Deployment Pipeline
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GHUB_TOKEN }}" \
          https://api.github.com/repos/pucardotorg/pucar-Devops/actions/workflows/${{ env.WORKFLOW_FILE }}/dispatches \
          -d '{"ref":"Solutions-Pipeline"}'
